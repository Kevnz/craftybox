// Generated by CoffeeScript 1.3.1
(function() {
  var should;

  should = chai.should();

  describe("Rotating Calipers", function() {
    describe("input", function() {
      it("should have arguments", function() {
        (function() {
          return new RotatingCalipers();
        }).should["throw"]("Argument required");
        return (function() {
          return new RotatingCalipers("asdas");
        }).should.not["throw"]("Argument required");
      });
      it("should take an array with at least three vertices", function() {
        (function() {
          return new RotatingCalipers("adasda");
        }).should["throw"]("Array of vertices required");
        (function() {
          return new RotatingCalipers([]);
        }).should["throw"]("Array of vertices required");
        (function() {
          return new RotatingCalipers(["abc"]);
        }).should["throw"]("Array of vertices required");
        (function() {
          return new RotatingCalipers(["abc", "abc"]);
        }).should["throw"]("Array of vertices required");
        return (function() {
          return new RotatingCalipers(["abc", "abc", "abc"]);
        }).should.not["throw"]("Array of vertices required");
      });
      it("should have each vertex as an array with x and y as integers", function() {
        (function() {
          return new RotatingCalipers(["abc", "abc", "abc"]);
        }).should["throw"]("Invalid vertex");
        (function() {
          return new RotatingCalipers([[], "abc", "abc"]);
        }).should["throw"]("Invalid vertex");
        (function() {
          return new RotatingCalipers([[], [], "abc"]);
        }).should["throw"]("Invalid vertex");
        (function() {
          return new RotatingCalipers([[], [], []]);
        }).should["throw"]("Invalid vertex");
        (function() {
          return new RotatingCalipers([["two", "three"], [], []]);
        }).should["throw"]("Invalid vertex");
        (function() {
          return new RotatingCalipers([["two", "three"], ["four", "five"], []]);
        }).should["throw"]("Invalid vertex");
        (function() {
          return new RotatingCalipers([["two", "three"], ["four", "five"], ["six", "seven"]]);
        }).should["throw"]("Invalid vertex");
        (function() {
          return new RotatingCalipers([[2, "three"], ["four", "five"], ["six", "seven"]]);
        }).should["throw"]("Invalid vertex");
        (function() {
          return new RotatingCalipers([[2, 3], ["four", "five"], ["six", "seven"]]);
        }).should["throw"]("Invalid vertex");
        (function() {
          return new RotatingCalipers([[2, 3], [4, "five"], ["six", "seven"]]);
        }).should["throw"]("Invalid vertex");
        (function() {
          return new RotatingCalipers([[2, 3], [4, 5], ["six", "seven"]]);
        }).should["throw"]("Invalid vertex");
        (function() {
          return new RotatingCalipers([[2, 3], [4, 5], [6, "seven"]]);
        }).should["throw"]("Invalid vertex");
        (function() {
          return new RotatingCalipers([[2, 3], [4, 5], [6, 7]]);
        }).should.not["throw"]("Invalid vertex");
        return (function() {
          return new RotatingCalipers([["2", "3"], ["4", "5"], ["6", "7"]]);
        }).should.not["throw"]("Invalid vertex");
      });
      it("should be in clockwise order", function() {});
      it("should also accept counterclockwise, but convert it", function() {});
      return it("should form a convex polygon", function() {});
    });
    /*
      IMO, if we calculate the convex hull, the input can just be arbitrary array of points
    */

    return describe("calculating convex hull", function() {
      var solver;
      solver = null;
      return it("should return the aligned axis rectangle in clockwise order", function() {
        var hullPoints;
        solver = new RotatingCalipers([[0, 0], [1, 0], [1, 1], [0, 1]]);
        hullPoints = solver.convexHull();
        hullPoints.should.have.length(4);
        hullPoints[0][0].should.equal(0);
        hullPoints[0][1].should.equal(1);
        hullPoints[1][0].should.equal(1);
        hullPoints[1][1].should.equal(1);
        hullPoints[2][0].should.equal(1);
        hullPoints[2][1].should.equal(0);
        hullPoints[3][0].should.equal(0);
        return hullPoints[3][1].should.equal(0);
      });
    });
  });

}).call(this);
